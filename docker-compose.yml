# Docker Compose para ambiente de desenvolvimento e testes
version: '3.8'

services:
  # Frontend - Synapse React App
  synapse-frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8080/api
      - VITE_WS_URL=ws://localhost:8080/ws
      - VITE_AUTH_ENDPOINT=http://localhost:8080/auth
    depends_on:
      - synapse-backend
      - redis
    networks:
      - synapse-network
    command: npm run dev

  # Backend PHP simulado (para testes de integração)
  synapse-backend:
    image: php:8.2-apache
    ports:
      - "8080:80"
    volumes:
      - ./docker/php:/var/www/html
      - ./docker/php/apache.conf:/etc/apache2/sites-available/000-default.conf
    environment:
      - APACHE_DOCUMENT_ROOT=/var/www/html/public
      - PHP_MEMORY_LIMIT=256M
    networks:
      - synapse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache distribuído
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - synapse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (produção)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - synapse-frontend
      - synapse-backend
    networks:
      - synapse-network
    profiles:
      - production

  # PostgreSQL para dados estruturados (se necessário)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=synapse
      - POSTGRES_USER=synapse_user
      - POSTGRES_PASSWORD=synapse_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - synapse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapse_user -d synapse"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - database

  # ElasticSearch para busca avançada (opcional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - synapse-network
    profiles:
      - search

  # Kibana para visualização de logs (opcional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - synapse-network
    profiles:
      - search

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - synapse-network
    profiles:
      - monitoring

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - synapse-network
    profiles:
      - monitoring

networks:
  synapse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  node_modules:
  redis_data:
  postgres_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  nginx_logs: