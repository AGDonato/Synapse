name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: '**/package-lock.json'

jobs:
  # Job 1: AnÃ¡lise de CÃ³digo e Qualidade
  code-quality:
    name: 'Code Quality & Linting'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: ESLint
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Job 2: Build Test
  build-test:
    name: 'Build Application'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check build outputs
        run: |
          ls -la dist/
          echo "Build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # Job 3: Unit Tests (se existirem)
  unit-tests:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality
    if: hashFiles('src/test/**/*.test.{ts,tsx}') != ''

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Generate coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 1

  # Job 4: E2E Tests (se existirem)
  e2e-tests:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, build-test]
    if: hashFiles('src/test/e2e/**/*.{ts,spec.ts}') != ''

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test
        continue-on-error: true

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 1

  # Job 5: Deploy Notification (apenas notificar sucesso)
  deploy-notification:
    name: 'Deployment Ready'
    runs-on: ubuntu-latest
    needs: [build-test, unit-tests, e2e-tests]
    if: always() && (needs.build-test.result == 'success')
    
    steps:
      - name: Deployment notification
        run: |
          echo "âœ… Build successful for ${{ github.ref_name }} branch"
          echo "ðŸš€ Application ready for deployment"
          echo "ðŸ“Š Commit: ${{ github.sha }}"
          echo "ðŸ‘¤ Author: ${{ github.actor }}"

# ConfiguraÃ§Ãµes globais
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true